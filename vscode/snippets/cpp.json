{
	// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Boilerplate Code": {
		"prefix": [
			".."
		],
		"body": [
			"#include <iostream> \n",
			"using std::cin;",
			"using std::cout;",
			"using std::getline;",
			"using std::string; \n",
			"int main()",
			"{",
			"    ${1:}",
			"}"
		]
	},
	"Multiply str": {
		"prefix": [
			"multiply str",
			"multiply"
		],
		"body": [
			"string operator*(string a, unsigned int b)",
			"{",
			"    string output = \"\";",
			"    while (b--)",
			"    {",
			"        output += a;",
			"    }",
			"    return output;",
			"} \n",
			"string str;",
			"int num_of_times_to_loop;",
			"void multiply_str(string str, int num_of_times_to_loop);",
			"void multiply_str(string str, int num_of_times_to_loop)",
			"{",
			"    cout << (str * num_of_times_to_loop) << \"\\n\";",
			"}"
		]
	},
	"Random Number": {
		"prefix": [
			"random number",
			"rand"
		],
		"body": [
			"#include <time.h> \n",
			"int random_number;",
			"void randomNumber();",
			"void randomNumber()",
			"{",
			"    // Initialize random seed",
			"    srand(time(NULL)); \n",
			"    // Generate random number between 1 and 100",
			"    random_number = rand() % 100 + 1; \n",
			"    cout << \"Your random number: \" << random_number << \"\\n\";",
			"}"
		]
	},
	"Replace First Word of str": {
		"prefix": [
			"replace first word of str",
			"replace"
		],
		"body": [
			"string str; \n",
			"void replace_first_word_of_str(string str); \n",
			"void replace_first_word_of_str(string str)",
			"{",
			"    string::size_type n = 0;",
			"    n = str.find_first_not_of(\" \\t\", n);",
			"    n = str.find_first_of(\" \\t\", n);",
			"    str.erase(0, str.find_first_not_of(\" \\t\", n)); \n",
			"    cout << str << \"\\n\"; // this line can be removed if you dont want to print the str",
			"}"
		],
	},
	"Text Animation": {
		"prefix": [
			"animate",
			"animation"
		],
		"body": [
			"#include <windows.h> \n",
			"string str; \n",
			"void animation(string str);",
			"void animation(string str)",
			"{",
			"    int x = 0;",
			"    while (str[x] != '\\0')",
			"    {",
			"        cout << str[x];",
			"        // Sleep(50);",
			"        Sleep(100);",
			"        x++;",
			"    };",
			"    cout << \"\\n\";",
			"}"
		],
	},
	"Convert str to uppercase": {
		"prefix": [
			".upper",
			"upper"
		],
		"body": [
			"string str; \n",
			"string uppercase(string str);",
			"string uppercase(string str)",
			"{",
			"    for (int i = 0; i < str.length(); i++)",
			"    {",
			"        str[i] = toupper(str[i]);",
			"    } \n",
			"    cout << str << \"\\n\";",
			"} \n",
		],
	},
	"Convert str to lowercase": {
		"prefix": [
			".lower",
			"lower"
		],
		"body": [
			"string str; \n",
			"string lowercase(string str);",
			"string lowercase(string str)",
			"{",
			"    for (int i = 0; i < str.length(); i++)",
			"    {",
			"        str[i] = tolower(str[i]);",
			"    } \n",
			"    cout << str << \"\\n\";",
			"} \n"
		],
	},
	"Function": {
		"prefix": [
			"f",
			"fn",
			"fun",
			"function"
		],
		"body": [
			"${1:DataType} ${2:FunctionName} (${3:args});",
			"${1:DataType} ${2:FunctionName} (${3:args})",
			"{",
			"// ${4:Code}",
			"}"
		]
	},
	"Debugging Print Statement": {
		"prefix": [
			"d",
			"debug"
		],
		"body": [
			"cout << \"[DEBUG]: ${1:}\";"
		]
	}
}